package decisionTrees;

import genetics.BasicGeneticAlgorithm;
import genetics.IChromosomeChooser;
import genetics.IFitnessCalculator;
import genetics.MetaclassFitnessCalculator;
import genetics.TournamentChooser;

import java.util.Set;

import networkIOtranslation.FeatureExtractionIOTranslator;
import networkIOtranslation.INetworkIOTranslator;
import neuralNetwork.CharacterTrainingExample;
import neuralNetwork.INeuralNetwork;
import neuralNetwork.MatrixNeuralNetwork;

public class OptimalTreeFinder {
	private Set<CharacterTrainingExample> trainingSet, testSet;
	private float minRequiredFitness;
	private char[] classes;
	private int numberLeafClasses;
	private IChromosomeChooser chooser;

	private final float DEFAULT_REQUIRED_FITNESS = 0.1f;
	private final int DEFAULT_NUMBER_LEAF_CLASSES = 3;
	
	public OptimalTreeFinder(Set<CharacterTrainingExample> trainingSet, Set<CharacterTrainingExample> testSet, char[] classes){
		this.trainingSet = trainingSet;
		this.testSet = testSet;
		this.classes = classes;
		
		chooser = new TournamentChooser();
		
		minRequiredFitness = DEFAULT_REQUIRED_FITNESS;
	}
	
	public MetaclassTree getOptimalTree(){
		INetworkIOTranslator translator = new FeatureExtractionIOTranslator();
		INeuralNetwork network = 
				new MatrixNeuralNetwork(((FeatureExtractionIOTranslator)translator).getInputLength(), 1, 100, classes.length, true);
		
		MetaclassNode rootNode = new MetaclassNode(classes, network);
		addNodesToTree(rootNode);
		
		return null;
	}
	
	private void addNodesToTree(MetaclassNode parent){
		char[] parentClasses = parent.getClasses();
		
		IFitnessCalculator fitnessCalc = new MetaclassFitnessCalculator(trainingSet, testSet, parentClasses);
		BasicGeneticAlgorithm geneticAlgo = new BasicGeneticAlgorithm(fitnessCalc, chooser);
		int[][] chromosomes = geneticAlgo.generateRandomChromosomeSet(parentClasses.length, parentClasses.length);
	}
	
	public void setNumberLeafClasses(int numberClasses){
		numberLeafClasses = numberClasses;
	}

	public float getMinRequiredFitness() {
		return minRequiredFitness;
	}

	public void setMinRequiredFitness(float minRequiredFitness) {
		this.minRequiredFitness = minRequiredFitness;
	}
}

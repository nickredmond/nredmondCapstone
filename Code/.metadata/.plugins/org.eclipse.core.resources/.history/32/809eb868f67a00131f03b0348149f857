package imageProcessing;

import java.awt.image.BufferedImage;

import javax.swing.BoxLayout;
import javax.swing.JFrame;

import appTest.ImageTestPanel;

public class NetworkIOTranslator {
	private final int IMAGE_DIMENSION = 30;
	private final int MAX_RGB_VALUE = -16777216;
	
	private final int MAX_BINARY_INDEX = 7;
	private final int WHITE_RGB_VALUE = -1;
	
	public int[] translateCharacterToNetworkOutput(char c){
		int unicodeValue = (int)c;
		return translateIntToBinary128(unicodeValue);
	}
	
	public char translateNetworkOutputToCharacter(int[] output){
		int unicodeValue = translateBinary128ToInt(output);
		return (char)unicodeValue;
	}
	
	private int[] translateIntToBinary128(int value){
		int remainder = value;
		int[] binary = new int[MAX_BINARY_INDEX];
		
		for (int i = binary.length; i >= -1; i--){
			int binaryIndexValue = (int)Math.pow(2, i + 1);
			
			if (remainder / binaryIndexValue > 0){
				binary[binary.length - i - 2] = 1;
			}
			
			remainder = remainder % binaryIndexValue;
		}
		
		return binary;
	}
	
	private int translateBinary128ToInt(int[] value){
		if (value.length != MAX_BINARY_INDEX){
			throw new IllegalArgumentException("Array must be of length " + MAX_BINARY_INDEX);
		}
		
		int result = 0;
		
		for (int i = 0; i < value.length; i++){
			if (value[i] == 1){
				int binaryPower = MAX_BINARY_INDEX - i - 1;
				int indexValue = (int)Math.pow(2, binaryPower);
				result += indexValue;
			}
		}
		
		return result;
	}
	
	public float[] translateImageToNetworkInput(BufferedImage img){
		float[] networkInput = scaleToDimension(img);
		float[] normalizedInput = normalizeNetworkInput(networkInput);
		
		return normalizedInput;
	}

	private float[] normalizeNetworkInput(float[] networkInput) {
		float[] normalizedInput = networkInput;
		
		for (int i = 0; i < networkInput.length; i++){
			normalizedInput[i] = normalizedInput[i] / (float)MAX_RGB_VALUE;
		}
		
		return normalizedInput;
	}
	
	private boolean isValidPoint(int x, int y, BufferedImage img){
		return (x < img.getWidth() && y < img.getHeight());
	}

	private float[] scaleToDimension(BufferedImage img) {
		float[] networkInput = new float[IMAGE_DIMENSION * IMAGE_DIMENSION];		
		float scaleValue = (float) img.getHeight() / IMAGE_DIMENSION;
		int newWidth = (int) ((1 / scaleValue) * img.getWidth());
		
		int currentInputIndex = 0;
		int startingX = (IMAGE_DIMENSION - newWidth) / 2;
		
		BufferedImage scaledImg = scaleToProperHeight(img, scaleValue, startingX);
		
		for (int x = 0; x < startingX; x++){
			for (int y = 0; y < scaledImg.getHeight(); y++){
				scaledImg.setRGB(x, y, WHITE_RGB_VALUE);
			}
		}
		
		for (int x = (startingX + newWidth); x < scaledImg.getWidth(); x++){
			for (int y = 0; y < scaledImg.getHeight(); y++){
				scaledImg.setRGB(x, y, WHITE_RGB_VALUE);
			}
		}
		
		ImageTestPanel bp = new ImageTestPanel();
		bp.setTestImage(img);
		
		ImageTestPanel p = new ImageTestPanel();
		p.setTestImage(scaledImg);
		
		JFrame f = new JFrame();
		f.getContentPane().setLayout(new BoxLayout(f.getContentPane(), BoxLayout.X_AXIS));
	//	f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		f.getContentPane().add(bp);
		f.getContentPane().add(p);
		f.setVisible(true);
		
		
		
		return networkInput;
	}

	private BufferedImage scaleToProperHeight(BufferedImage img, float scaleValue, int startingX) {
		BufferedImage scaledImg = new BufferedImage(IMAGE_DIMENSION, IMAGE_DIMENSION, BufferedImage.TYPE_INT_RGB);
		int currentScaledImgX = startingX;
		int currentScaledImgY;
		
		if (currentScaledImgX < 0){
			currentScaledImgX = 0;
		}
		
		for (float x = 0; x < img.getWidth(); x += scaleValue){
			currentScaledImgY = 0;
			
			for (float y = 0; y < img.getHeight(); y += scaleValue){
				int xPos = (int) x;
				int yPos = (int) y;
				
				if (isValidPoint(currentScaledImgX, currentScaledImgY, scaledImg)){
					scaledImg.setRGB(currentScaledImgX, currentScaledImgY, img.getRGB(xPos, yPos));
				}
				
				currentScaledImgY++;
			}
			currentScaledImgX++;
		}
		return scaledImg;
	}
}

package app;

public class SpellChecker {
	private static final int MAX_DISTANCE = 4;
	private static final char WORD_DELIMITER = ' ';
	
	public static String spellCheckText(String text){
		int currentWordStart = 0;
		int currentWordEnd = 0;
		boolean inWord = false;
		
		String correctedText = text;
		
		for (int i = 0; i < correctedText.length(); i++){
			if (correctedText.charAt(i) != WORD_DELIMITER && !inWord){
				currentWordStart = i;
				inWord = true;
			}
			else if (correctedText.charAt(i) == WORD_DELIMITER && inWord){
				//currentWordEnd = i;
				inWord = false;
				
				String word = correctedText.substring(currentWordStart - 1, i);
				String before = correctedText.substring(0, currentWordStart);
				String after = correctedText.substring(i);
				String correctedWord = correctSpelling(word);
				
				System.out.println("n: " + word);
				
				correctedText = before + correctedWord + after;
				i += (correctedWord.length() - word.length());
			}
		}
		
		return correctedText;
	}
	
	public static String correctSpelling(String word){
		IDictionary dictionary = DictionaryFactory.getDictionary();
		String closestMatch = word;
		
		if (!dictionary.contains(word)){
			int smallestDistance = -1;
			
			for (String nextWord : dictionary.getWords()){
				if (Math.abs(nextWord.length() - word.length()) <= MAX_DISTANCE){
					int editDistance = EditDistanceCalculator.calculateLevenshteinDistance(word, nextWord, false);
					
					if (editDistance < smallestDistance || smallestDistance < 0){
						smallestDistance = editDistance;
						closestMatch = nextWord;
					}
				}
			}
		}
		
		return closestMatch;
	}
}

package neuralNetwork;

import java.util.List;
import java.util.Set;

public class BackpropagationTrainer implements INetworkTrainer {
	private final float LEARNING_RATE = 0.03f;

	@Override
	public void trainWithTrainingSet(NeuralNetwork network,
			Set<TrainingExample> trainingSet) {
		for (TrainingExample nextExample : trainingSet){
			List<Neuron> outputNeurons = network.getOutputLayer().getNeurons();
			calculateOutputErrors(network, nextExample, outputNeurons);
			
			List<NetworkLayer> hiddenLayers = network.getHiddenLayers();
			calculateHiddenErrorsAndDeltas(hiddenLayers, network.getOutputLayer());
		}
		
		changeWeights(trainingSet.size(), network);
	}
	
	private void changeWeights(int trainingSize, NeuralNetwork network){
		NetworkLayer inputLayer = network.getInputLayer();
		changeWeightsForLayer(trainingSize, inputLayer);
		
		for (NetworkLayer nextHiddenLayer : network.getHiddenLayers()){
			changeWeightsForLayer(trainingSize, nextHiddenLayer);
		}
	}
	
	private void changeWeightsForLayer(int trainingSize, NetworkLayer layer){
		for (Neuron nextNeuron : layer.getNeurons()){
			for (NeuronConnection nextConnection : nextNeuron.getOutputConnections()){
				float changeAmount = (1.0f / trainingSize) * nextConnection.getDeltaValue();
				if (!nextNeuron.isBias()){
					changeAmount += LEARNING_RATE * nextConnection.getWeight();
				}
				
				nextConnection.setWeight(nextConnection.getWeight() + changeAmount);
			}
		}
	}

	private void calculateHiddenErrorsAndDeltas(List<NetworkLayer> hiddenLayers, NetworkLayer outputLayer) {
		for (int i = hiddenLayers.size() - 1; i >= 0; i--){
			NetworkLayer currentLayer = hiddenLayers.get(i);
			
			for (Neuron nextNeuron : currentLayer.getNeurons()){
				float errorValue = 0.0f;
				
				for (NeuronConnection nextConnection : nextNeuron.getOutputConnections()){
					errorValue += nextConnection.getWeight() * nextConnection.getRightConnector().getErrorValue();
					
					float nextDeltaValue = nextConnection.getDeltaValue() + 
							(nextNeuron.getValue() * nextConnection.getRightConnector().getErrorValue());
					
					nextConnection.setDeltaValue(nextDeltaValue);
				}
				
				nextNeuron.setErrorValue(errorValue);
			}
		}
	}

//	private NeuronConnection findInputConnection(NetworkLayer layer,
//			Neuron match) {		
//		for (Neuron nextNeuron : layer.getNeurons()){
//			for (NeuronConnection nextConnection : nextNeuron.getInputConnections()){
//				if (nextConnection.getConnector() == match){
//					return nextConnection;
//				}
//			}
//		}
//		
//		return null;
//	}

	private void calculateOutputErrors(NeuralNetwork network,
			TrainingExample nextExample, List<Neuron> outputNeurons) {
		int[] actualOutput = network.getOutputForInput(nextExample.getInput());
		int[] desiredOutput = nextExample.getOutput();
		
		for (int i = 0; i < actualOutput.length; i++){
			float nextErrorValue = (float)(actualOutput[i] - desiredOutput[i]);
			outputNeurons.get(i).setErrorValue(nextErrorValue);
		}
	}

}

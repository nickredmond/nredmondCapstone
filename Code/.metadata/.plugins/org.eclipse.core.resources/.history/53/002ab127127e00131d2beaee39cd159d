package imageProcessing;

import java.awt.image.BufferedImage;

public class FeatureExtractionIOTranslator implements INetworkIOTranslator {
	private final int ZONING_DIMENSION_X = 4;
	private final int ZONING_DIMENSION_Y = 4;
	
	private final float TOP_DIMENSION_PERCENT = 0.3f;
	private final float MID_DIMENSION_PERCENT = 0.5f;
	private final float BOTTOM_DIMENSION_PERCENT = 0.8f;
	
	private final float GAMMA = 2.2f;
	private final float R_LUMINANCE = 0.2126f;
	private final float G_LUMINANCE = 0.7152f;
	private final float B_LUMINANCE = 0.0722f;
	
	@Override
	public char translateNetworkOutputToCharacter(float[] output) {
		return new UnicodeNetworkIOTranslator().translateNetworkOutputToCharacter(output);
	}

	@Override
	public int[] translateCharacterToNetworkOutput(char c) {
		return new UnicodeNetworkIOTranslator().translateCharacterToNetworkOutput(c);
	}

	@Override
	public float[] translateImageToNetworkInput(BufferedImage img) {
		int[][] lightValues = new int[img.getWidth()][img.getHeight()];
		
		for (int x = 0; x < img.getWidth(); x++){
			for (int y = 0; y < img.getHeight(); y++){
				int rgbValue = img.getRGB(x, y);
				int rVal = (rgbValue >> 16) & 0xff;
				int gVal = (rgbValue >> 8) & 0xff;
				int bVal = (rgbValue) & 0xff;
				
				float rLinear = (float) Math.pow(rVal, GAMMA);
				float gLinear = (float) Math.pow(gVal, GAMMA);
				float bLinear = (float) Math.pow(bVal, GAMMA);
				
				float luminance = (R_LUMINANCE * rLinear) + (G_LUMINANCE + gLinear) +
						(B_LUMINANCE * bLinear);
				
				int lightness = (int) (116 * Math.pow(luminance, 0.3333) - 16);
				lightValues[y][x] = lightness;
			}
		}
		
		for (int x = 0; x < lightValues.length; x++){
			for (int y = 0; y < lightValues[x].length; y++){
				System.out.print(lightValues[x][y] + " ");
			}
			System.out.println();
		}
		
		return null;
	}

	private float getWidthSum(float percentTotalHeight, BufferedImage img){
		return 0.0f;
	}
	
	private float getHeightSum(float percentTotalWidth, BufferedImage img){
		return 0.0f;
	}
	
	private float getHorizontalSymmetryValue(BufferedImage img){
		return 0.0f;
	}
	
	private float getVerticalSymmetryValue(BufferedImage img){
		return 0.0f;
	}
	
	private float[] getZoningValues(BufferedImage img){
		return null;
	}
}

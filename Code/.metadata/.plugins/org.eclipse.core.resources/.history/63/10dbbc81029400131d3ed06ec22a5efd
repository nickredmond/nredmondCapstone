package receptors;

import java.awt.image.BufferedImage;

import debug.FeatureExtractionDebug;

public class ReceptorFilter {
	
	public static boolean crossesImage(Receptor receptor, BufferedImage image){
		boolean crosses = false;
		
		float slopeY = receptor.getEndingPoint().Y() - receptor.getStartingPoint().Y();
		float slopeX = receptor.getEndingPoint().X() - receptor.getStartingPoint().X();
		
		float scaleFactor = (slopeX != 0) ? Math.abs(1.0f / slopeX) : Math.abs(1.0f / slopeY);
		
		int xTravel = (int)(scaleFactor * slopeX);
		int yTravel = (int)(scaleFactor * slopeY);
		
		int startingX = (int)(receptor.getStartingPoint().X() * 30);
		int startingY = (int)(receptor.getStartingPoint().Y() * 30);
		
		int endingX = (int)(receptor.getEndingPoint().X() * 30);
		int endingY = (int)(receptor.getEndingPoint().Y() * 30);
		
		int[][] imageValues = new int[40][30];
		
		float currentY = startingY;
		System.out.println("starting: " + startingX + " " + startingY);
		for (int col = startingX; isInBounds(imageValues, col, currentY, endingX, endingY, xTravel, yTravel) 
				&& !crosses; col += xTravel){
			System.out.println("col: " + col + " " + (int)currentY);
			imageValues[(int)currentY][col] = 1;
			
			currentY += yTravel;
		}
		
		FeatureExtractionDebug.printImg(imageValues);
		
		return crosses;
	}
	
	private static boolean isInBounds(int[][] imageValues, int col, float currentY,
			int endingX, int endingY, int xTravel, int yTravel){
		int currentYint = (int)currentY;
		
		boolean isInImage = (col < imageValues[0].length && col >= 0 && currentYint < imageValues.length &&
				currentYint >= 0);
		boolean isInVectorX = (xTravel > 0) ? (col <= endingX) : (col >= endingX);
		boolean isInVectorY = (yTravel > 0) ? (currentY <= endingY) : (currentY >= endingY);
		
		return isInImage && isInVectorX && isInVectorY;
	}
}

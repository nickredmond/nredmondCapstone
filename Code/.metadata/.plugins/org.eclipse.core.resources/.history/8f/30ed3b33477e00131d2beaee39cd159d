package imageProcessing;

import java.awt.image.BufferedImage;

public class FeatureExtractionIOTranslator implements INetworkIOTranslator {
	private final int ZONING_DIMENSION_X = 4;
	private final int ZONING_DIMENSION_Y = 4;
	
	private final float TOP_DIMENSION_PERCENT = 0.3f;
	private final float MID_DIMENSION_PERCENT = 0.5f;
	private final float BOTTOM_DIMENSION_PERCENT = 0.8f;
	
	private final float GAMMA = 2.2f;
	private final float R_LUMINANCE = 0.2126f;
	private final float G_LUMINANCE = 0.7152f;
	private final float B_LUMINANCE = 0.0722f;
	
	private final int DARK_BOUNDARY = 5000;
	
	@Override
	public char translateNetworkOutputToCharacter(float[] output) {
		return new UnicodeNetworkIOTranslator().translateNetworkOutputToCharacter(output);
	}

	@Override
	public int[] translateCharacterToNetworkOutput(char c) {
		return new UnicodeNetworkIOTranslator().translateCharacterToNetworkOutput(c);
	}

	@Override
	public float[] translateImageToNetworkInput(BufferedImage img) {
		int[][] lightValues = getLightValues(img);
		getWidthSum(TOP_DIMENSION_PERCENT, lightValues);
		getWidthSum(MID_DIMENSION_PERCENT, lightValues);
		getWidthSum(BOTTOM_DIMENSION_PERCENT, lightValues);
		getHeightSum(TOP_DIMENSION_PERCENT, lightValues);
		getHeightSum(MID_DIMENSION_PERCENT, lightValues);
		getHeightSum(BOTTOM_DIMENSION_PERCENT, lightValues);
		
		return null;
	}

	private int[][] getLightValues(BufferedImage img){
		int[][] lightValues = new int[img.getWidth()][img.getHeight()];
		
		for (int x = 0; x < img.getWidth(); x++){
			for (int y = 0; y < img.getHeight(); y++){
				int rgbValue = img.getRGB(x, y);
				int rVal = (rgbValue >> 16) & 0xff;
				int gVal = (rgbValue >> 8) & 0xff;
				int bVal = (rgbValue) & 0xff;
				
				float rLinear = (float) Math.pow(rVal, GAMMA);
				float gLinear = (float) Math.pow(gVal, GAMMA);
				float bLinear = (float) Math.pow(bVal, GAMMA);
				
				float luminance = (R_LUMINANCE * rLinear) + (G_LUMINANCE + gLinear) +
						(B_LUMINANCE * bLinear);
				
				int lightness = (int) (116 * Math.pow(luminance, 0.3333) - 16);
				lightValues[y][x] = (lightness < DARK_BOUNDARY) ? 0 : 1;
			}
		}
		
		invertLightValues(lightValues);
		return lightValues;
	}
	
	private void printImg(int[][] lightValues){
		for (int row = 0; row < lightValues.length; row++){
			for (int col = 0; col < lightValues[row].length; col++){
				System.out.print(lightValues[row][col] + " ");
			}
			System.out.println();
		}
	}
	
	private void invertLightValues(int[][] lightValues) {
		for (int row = 0; row < lightValues.length; row++){
			for (int col = 0; col < lightValues[row].length; col++){
				lightValues[row][col] = ((lightValues[row][col] == 0) ? 1 : 0);
			}
		}
	}

	private int getWidthSum(float percentTotalHeight, int[][] lightValues){
		int row = (int)(percentTotalHeight * lightValues.length);
		int widthSum = 0;
		
		for (int col = 0; col < lightValues[row].length; col++){
			widthSum += lightValues[row][col];
		}
		
		System.out.println("\r\nsum at " + row + ": " + widthSum);
		return widthSum;
	}
	
	private int getHeightSum(float percentTotalWidth, int[][] lightValues){
		int col = (int)(percentTotalWidth * lightValues[0].length);
		int heightSum = 0;
		
		for (int row = 0; row < lightValues.length; row++){
			heightSum += lightValues[row][col];
		}
		
		System.out.println("\r\nhSum at " + col + ": " + heightSum);
		return heightSum;
	}
	
	private float getHorizontalSymmetryValue(BufferedImage img){
		return 0.0f;
	}
	
	private float getVerticalSymmetryValue(BufferedImage img){ // DO THIS
		int imageHalf = img.getWidth() / 2;
		
		for (int row = 0; row < img.getHeight(); row++){
			for (int distance = 0; distance < imageHalf; distance++){
				int leftCol = imageHalf - 1 - distance;
				int rightCol = imageHalf + distance;
				
				System.out.println("l: " + leftCol + ", r: " + rightCol);
			}
		}
		
		return 0.0f;
	}
	
	private float[] getZoningValues(BufferedImage img){
		return null;
	}
}

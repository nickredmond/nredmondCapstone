package genetics;

import java.util.Set;

import networkIOtranslation.FeatureExtractionIOTranslator;
import neuralNetwork.INeuralNetwork;
import neuralNetwork.MatrixBackpropTrainer;
import neuralNetwork.MatrixNeuralNetwork;
import neuralNetwork.TrainingExample;

public class MetaclassFitnessCalculator implements IFitnessCalculator {
	private Set<TrainingExample> trainingSet, testSet;
	private char[] classes;
//	private INeuralNetwork network;
	
	public MetaclassFitnessCalculator(Set<TrainingExample> trainingSet, Set<TrainingExample> testSet,
			char[] classes){
		this.trainingSet = trainingSet;
		this.testSet = testSet;
		this.classes = classes;
	}
	
	@Override
	public float getFitness(int[] chromosome) {
		if (chromosome.length != classes.length){
			throw new IllegalArgumentException("Chromosome must be of same length as classes.");
		}
		
		int numLeftClasses = 0;
		int numRightClasses = 0;
		
		for (int i = 0; i < chromosome.length; i++){
			if (chromosome[i] == 0){
				numLeftClasses++;
			}
			else numRightClasses++;
		}
		
		char[] leftClasses = new char[numLeftClasses];
		char[] rightClasses = new char[numRightClasses];
		
		int currentLeftIndex = 0;
		int currentRightIndex = 0;
		
		for (int i = 0; i < chromosome.length; i++){
			if (chromosome[i] == 0){
				leftClasses[currentLeftIndex] = classes[i];
				currentLeftIndex++;
			}
			else{
				rightClasses[currentRightIndex] = classes[i];
				currentRightIndex++;
			}
		}
		
		FeatureExtractionIOTranslator translator = new FeatureExtractionIOTranslator();
		MatrixBackpropTrainer trainer = new MatrixBackpropTrainer(0.05f, 0.02f);
		INeuralNetwork leftNetwork = new MatrixNeuralNetwork(translator.getInputLength(), 1, 100, numLeftClasses, true);
		INeuralNetwork rightNetwork = new MatrixNeuralNetwork(translator.getInputLength(), 1, 100, numLeftClasses, true);
		
		trainer.trainWithTrainingSet(leftNetwork, trainingSet, testSet);
		trainer.trainWithTrainingSet(rightNetwork, trainingSet, testSet);
		
		return 0;
	}

}

package genetics;

import java.util.Random;

public class BasicGeneticAlgorithm implements IGeneticAlgorithm {
	private float mutationRate, crossoverRate;
	
	@Override
	public int[][] generateRandomChromosomeSet(int numberChromosomes,
			int chromosomeLength) {
		int[][] chromosomes = new int[numberChromosomes][chromosomeLength];
		Random rand = new Random();
		
		for (int i = 0; i < chromosomes.length; i++){
			for (int j = 0; j < chromosomes[0].length; j++){
				int nextGene = rand.nextInt(2);
				chromosomes[i][j] = nextGene;
			}
		}
		
		return chromosomes;
	}

	@Override
	public int[][] breed(int[][] originalChromosomes) {
		return null;
	}

	@Override
	public void setMutationRate(float rate) {
		mutationRate = rate;
	}

	@Override
	public float getMutationRate() {
		return mutationRate;
	}

	@Override
	public void setCrossoverRate(float rate) {
		crossoverRate = rate;
	}

	@Override
	public float getCrossoverRate() {
		return crossoverRate;
	}

}

package app;

import imageProcessing.FeatureExtractionIOTranslator;
import imageProcessing.INetworkIOTranslator;
import io.NeuralNetworkIO;

import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import neuralNetwork.INeuralNetwork;

public class InputReader {
	private static final String TRAINED_NETWORK_NAME = "trainedNetwork";
	
	public static ReadResult readImageInput(BufferedImage image, List<ImageReadMethod> readMethods) throws IOException{
		ReadResult result = new ReadResult();
		List<CharacterResult> nnTranslation = new ArrayList<CharacterResult>();
		List<CharacterResult> ldTranslation = new ArrayList<CharacterResult>();
		
		INetworkIOTranslator translator = new FeatureExtractionIOTranslator();
		
		if (readMethods.contains(ImageReadMethod.NEURAL_NETWORK)){
			ImageHandlerFactory.setHandlerMethod(ImageReadMethod.NEURAL_NETWORK);
			INeuralNetwork savedNetwork = NeuralNetworkIO.readNetwork(TRAINED_NETWORK_NAME);
			ImageReader reader = new ImageReader(savedNetwork, translator);
			
			nnTranslation = reader.readTextFromImage(image);
		}
		if (readMethods.contains(ImageReadMethod.LEAST_DISTANCE)){
			ImageHandlerFactory.setHandlerMethod(ImageReadMethod.LEAST_DISTANCE);
			ImageReader reader = new ImageReader(translator);
			
			ldTranslation = reader.readTextFromImage(image);
		}
		if (readMethods.contains(ImageReadMethod.NEURAL_NETWORK) && readMethods.contains(ImageReadMethod.LEAST_DISTANCE)){
			int index = 0;
			
			for (CharacterResult nextResult : nnTranslation){
				if (nextResult.isRejected()){
					nextResult = ldTranslation.get(index);
				}
				index++;
			}
		}
		
		return convertTranslationToResult((nnTranslation == null) ? ldTranslation : nnTranslation);
	}
	
	private static ReadResult convertTranslationToResult(
			List<CharacterResult> translation) {
		String resultString = "";
		
		for (CharacterResult nextResult : translation){
			if (nextResult.getResult().toString().equals())
		}
		
		return null;
	}

	public static CharacterResult readImageInputFromNeuralNetwork(BufferedImage image, INeuralNetwork network){
		
	}
	
	private static CharacterResult readImageFromNeuralNet(BufferedImage image, INetworkIOTranslator translator, INeuralNetwork network){
		
	}
	
	private static CharacterResult readImageWithLeastDistance(BufferedImage image, INetworkIOTranslator translator){
		
	}
	
	public static void setConfigStatus(ImageReadMethod type){
		
	}
}

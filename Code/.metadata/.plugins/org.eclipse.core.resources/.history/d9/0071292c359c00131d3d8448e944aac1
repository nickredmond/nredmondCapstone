package appTest;

import io.CharacterType;
import io.TrainingDataReader;

import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

import networkIOtranslation.FeatureExtractionIOTranslator;
import neuralNetwork.CharacterTrainingExample;
import neuralNetwork.INeuralNetwork;
import neuralNetwork.MatrixNeuralNetwork;
import neuralNetwork.TrainingExample;

public class NNclassificationLogic {
	public static void testLogic() throws IOException{
		FeatureExtractionIOTranslator translator = new FeatureExtractionIOTranslator();
		INeuralNetwork network = new MatrixNeuralNetwork(translator.getInputLength(), 1, 100, 2, true);
		
		Set<CharacterTrainingExample> examples = TrainingDataReader.createTrainingSetFromFile(CharacterType.ASCII2);
		Set<TrainingExample> trainingSet = new HashSet<TrainingExample>();
		
		char[] leftClasses = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U'
				, 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f'};
		char[] rightClasses = {'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's'
				, 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ' '};
		
		for (CharacterTrainingExample nextExample : examples){
			
		}
	}
	
	private static int getClassNr(float[] output){
		int classNr = 0;
		
		if (output[1] > output[0]){
			classNr = 1;
		}
		
		return classNr;
	}
	
	private static int getClassNr(char character, char[] leftClasses, char[] rightClasses){
		int classNr = 0;
		boolean foundClass = false;
		
		for (int i = 0; i < rightClasses.length && foundClass; i++){
			if (character == rightClasses[i]){
				foundClass = true;
				classNr = 1;
			}
		}
		
		return classNr;
	}
}

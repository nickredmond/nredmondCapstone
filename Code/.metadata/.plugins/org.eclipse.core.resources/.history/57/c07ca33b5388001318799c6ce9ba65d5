package neuralNetwork;

import java.util.Random;

public class MatrixNeuralNetwork {
	private float[] inputNeurons, outputNeurons;
	private float[][] hiddenNeurons;
	
	private float[][] inputWeights, outputWeights;
	private float[][][] hiddenWeights;
	
	private final float MAX_RANDOM_WEIGHT = 0.05f;
	
	public MatrixNeuralNetwork(int numberInputs, int numberHiddenLayers, int numberHiddenNeurons,
			int numberOutputs, boolean useRandomWeights){
		inputNeurons = new float[numberInputs];
		outputNeurons = new float[numberOutputs];
		hiddenNeurons = new float[numberHiddenLayers][numberHiddenNeurons];
		
		inputWeights = new float[numberInputs][numberHiddenNeurons];
		outputWeights = new float[numberHiddenNeurons][numberOutputs];
		hiddenWeights = new float[numberHiddenLayers - 1][numberHiddenNeurons][numberHiddenNeurons];
		
		if (useRandomWeights){
			initializeRandomWeights();
		}
	}
	
	private void initializeRandomWeights(){
		initializeWeightsForLayer(inputWeights);
		
		for (int i = 0; i < hiddenWeights.length; i++){
			initializeWeightsForLayer(hiddenWeights[i]);
		}
		
		initializeWeightsForLayer(outputWeights);
	}
	
	private void initializeWeightsForLayer(float[][] layerWeights){
		Random rand = new Random();
		
		for (int i = 0; i < layerWeights.length; i++){
			for (int j = 0; j < layerWeights[0].length; j++){
				float nextWeight = rand.nextFloat() - (1.0f - (2 * MAX_RANDOM_WEIGHT)) - MAX_RANDOM_WEIGHT;
				layerWeights[i][j] = nextWeight;
			}
		}
	}
}

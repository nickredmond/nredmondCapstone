package featureExtraction;

import java.awt.Point;
import java.util.ArrayList;
import java.util.List;

public class FeatureExtractionHelper {
	public static final int TOP = 0;
	public static final int TOP_RIGHT = 1;
	public static final int RIGHT = 2;
	public static final int BOTTOM_RIGHT = 3;
	public static final int BOTTOM = 4;
	public static final int BOTTOM_LEFT = 5;
	public static final int LEFT = 6;
	public static final int TOP_LEFT = 7;
	
	public static List<VectorDirection> getSurroundingPixels(int[][] skeletonValues, int row, int col){
		int top = (row > 0) ? skeletonValues[row-1][col] : 0;
		int topRight = (row > 0 && col < skeletonValues[0].length - 1) ? skeletonValues[row-1][col+1] : 0;
		int right = (col < skeletonValues[0].length - 1) ? skeletonValues[row][col+1] : 0;
		int bottomRight = (row < skeletonValues.length - 1 && col < skeletonValues[0].length - 1) ? skeletonValues[row+1][col+1] : 0;
		int bottom = (row < skeletonValues.length - 1) ? skeletonValues[row+1][col] : 0;
		int bottomLeft = (row < skeletonValues.length - 1 && col > 0) ? skeletonValues[row+1][col-1] : 0;
		int left = (col > 0) ? skeletonValues[row][col-1] : 0;
		int topLeft = (row > 0 && col > 0) ? skeletonValues[row-1][col-1] : 0;
		
		List<Integer> surroundingPixels = new ArrayList<Integer>();
		
		surroundingPixels.add(top);
		surroundingPixels.add(topRight);
		surroundingPixels.add(right);
		surroundingPixels.add(bottomRight);
		surroundingPixels.add(bottom);
		surroundingPixels.add(bottomLeft);
		surroundingPixels.add(left);
		surroundingPixels.add(topLeft);
		
		return surroundingPixels;
	}
}

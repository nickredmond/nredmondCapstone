package featureExtraction;

import java.awt.Point;

public enum VectorDirection {
	TOP{
		@Override
		public Point getNextPixelPoint(int row, int col, int[][] skeletonValues){
			return ((row > 0) ? new Point(row-1, col) : new Point(-1, -1));
		}
	},
	TOP_RIGHT{
		@Override
		public Point getNextPixelPoint(int row, int col, int[][] skeletonValues){
			return ((row > 0 && col < skeletonValues[0].length) ? new Point(row-1, col+1) : new Point(-1, -1));
		}
	},
	RIGHT{
		@Override
		public Point getNextPixelPoint(int row, int col, int[][] skeletonValues){
			return ((col < skeletonValues[0].length) ? new Point(row, col+1) : new Point(-1, -1));
		}
	},
	BOTTOM_RIGHT{
		@Override
		public Point getNextPixelPoint(int row, int col, int[][] skeletonValues){
			return ((row < skeletonValues.length && col < skeletonValues[0].length) ? new Point(row+1, col+1) : new Point(-1, -1));
		}
	},
	BOTTOM{
		@Override
		public Point getNextPixelPoint(int row, int col, int[][] skeletonValues){
			return ((row < skeletonValues.length) ? new Point(row+1, col) : new Point(-1, -1));
		}
	},
	BOTTOM_LEFT{
		@Override
		public Point getNextPixelPoint(int row, int col, int[][] skeletonValues){
			return ((row < skeletonValues.length && col > 0) ? new Point(row+1, col-1) : new Point(-1, -1));
		}
	},
	LEFT{
		@Override
		public Point getNextPixelPoint(int row, int col, int[][] skeletonValues){
			return ((col > 0) ? new Point(row, col-1) : new Point(-1, -1));
		}
	},
	TOP_LEFT{
		@Override
		public Point getNextPixelPoint(int row, int col, int[][] skeletonValues){
			return ((row > 0 && col > 0) ? new Point(row-1, col-1) : new Point(-1, -1));
		}
	};
	
	public abstract Point getNextPixelPoint(int row, int col, int[][] skeletonValues);
}

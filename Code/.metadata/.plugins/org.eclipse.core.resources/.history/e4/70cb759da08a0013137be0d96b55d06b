package math;

import org.jocl.CL;
import org.jocl.Pointer;
import org.jocl.Sizeof;
import org.jocl.cl_context;
import org.jocl.cl_context_properties;
import org.jocl.cl_device_id;
import org.jocl.cl_platform_id;

public class GpuNetworkCalculator implements INetworkCalculator {
	private static final String SIGMOID_SOURCE = "__kernel void "+
	        "sigmoidKernel(__global const float *a,"+
	        "             __global float *c)"+
	        "{"+
	        "    c[0] = 1.0f / (1.0f + exp(a[0]));"+
	        "}";
	private static final String ERROR_SOURCE = "__kernel void"+
	        "errorKernel(__global const float *weightValues,"+
			"			 __global const float *nextError,"+
	        "			 __global float *error"+	
	        "{"+
			"    int globalId = get_global_id(0);"+
	        "	 error[globalId] = weightValues[globalId] + nextError[globalId];";

	private cl_context gpuContext;
	
	public GpuNetworkCalculator(){
		cl_platform_id[] platforms = new cl_platform_id[1];
		CL.clGetPlatformIDs(platforms.length, platforms, null);
		
		cl_context_properties contextProps = new cl_context_properties();
		contextProps.addProperty(CL.CL_CONTEXT_PLATFORM, platforms[0]);
		
		cl_context gpuContext = CL.clCreateContextFromType(contextProps, CL.CL_DEVICE_TYPE_GPU, null, null, null);
		
		if (gpuContext == null){
			System.out.println(("COULD NOT ACCESS GPU"));
		}
		
		CL.setExceptionsEnabled(true);
		
		long[] numBytes = new long[1];
		CL.clGetContextInfo(gpuContext, CL.CL_CONTEXT_DEVICES, 0, null, numBytes);
		int numDevices = (int)numBytes[0] / Sizeof.cl_device_id;
		
		System.out.println("Number of GPUs: " + numDevices);
		
		cl_device_id[] devices = new cl_device_id[numDevices];
		CL.clGetContextInfo(gpuContext, CL.CL_CONTEXT_DEVICES, numBytes[0], Pointer.to(devices), null);
	}
	
	@Override
	public float[] calculateSigmoidValues(float[] zValues) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public float[] calculateErrorValues(float[][] weights,
			float[] nextLayerError) {
		// TODO Auto-generated method stub
		return null;
	}

}

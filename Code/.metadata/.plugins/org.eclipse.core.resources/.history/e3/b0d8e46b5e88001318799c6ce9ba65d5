package neuralNetwork;

import java.util.Set;

public class MatrixBackpropTrainer implements INetworkTrainer {

	@Override
	public void trainWithTrainingSet(INeuralNetwork network,
			Set<TrainingExample> trainingSet, Set<TrainingExample> testSet) {
		performTrainingIteration(trainingSet, network);
	}

	private void performTrainingIteration(Set<TrainingExample> trainingSet, INeuralNetwork network) {
		for (TrainingExample nextExample : trainingSet){
			float[] output = network.forwardPropagate(nextExample.getInput());
		}
	}
	
	private void calculateOutputError(INeuralNetwork network, float[] output, float[] desired){
		float[] outputError = new float[output.length];
		
		for (int i = 0; i < outputError.length; i++){
			outputError[i] = desired[i] - output[i];
		}
		
		network.setOutputError(k, value);
	}
	
	private void calculateError(INeuralNetwork network){
		
	}
}

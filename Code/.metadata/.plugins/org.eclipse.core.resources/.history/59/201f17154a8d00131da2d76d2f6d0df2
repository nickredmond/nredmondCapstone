package app;

import imageProcessing.INetworkIOTranslator;
import io.NeuralNetworkIO;

import java.awt.image.BufferedImage;
import java.util.List;

import neuralNetwork.INeuralNetwork;

public class InputReader {
	private static final String TRAINED_NETWORK_NAME = "trainedNetwork";
	
	public static ReadResult readImageInput(BufferedImage image, List<ImageReadMethod> readMethods){
		if (readMethods.contains(ImageReadMethod.NEURAL_NETWORK) && !readMethods.contains(ImageReadMethod.LEAST_DISTANCE)){
			
		}
		else if (readMethods.contains(ImageReadMethod.LEAST_DISTANCE) && !readMethods.contains(ImageReadMethod.NEURAL_NETWORK)){
			
		}
		else if (readMethods.contains(ImageReadMethod.NEURAL_NETWORK) && readMethods.contains(ImageReadMethod.LEAST_DISTANCE)){
			
		}
		else throw new IllegalArgumentException("Must contain one of the specified combinations: NN, LD, NN+LD");
	}
	
	public static ReadResult readImageInputFromNeuralNetwork(BufferedImage image, INeuralNetwork network){
		
	}
	
	private static CharacterResult readImageFromNeuralNet(BufferedImage image, INetworkIOTranslator translator, INeuralNetwork network){
		
	}
	
	private static CharacterResult readImageWithLeastDistance(BufferedImage image, INetworkIOTranslator translator){
		
	}
	
	public static void setConfigStatus(ImageReadMethod type){
		
	}
}

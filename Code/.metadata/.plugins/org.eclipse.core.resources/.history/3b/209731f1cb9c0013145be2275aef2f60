package decisionTrees;

import java.util.HashSet;
import java.util.Set;

import networkIOtranslation.FeatureExtractionIOTranslator;
import neuralNetwork.CharacterTrainingExample;
import neuralNetwork.INeuralNetwork;
import neuralNetwork.MatrixNeuralNetwork;
import neuralNetwork.TrainingExample;

public class BasicTreeFinder extends MetaclassTreeFinder {
	private FeatureExtractionIOTranslator translator;

	public BasicTreeFinder(Set<CharacterTrainingExample> trainingSet,
			Set<CharacterTrainingExample> testSet, char[] classes) {
		super(trainingSet, testSet, classes);
		translator = new FeatureExtractionIOTranslator();
	}

	@Override
	public MetaclassTree getTree() {
		INeuralNetwork network = new MatrixNeuralNetwork(translator.getInputLength(), 1, 100, 2, true);
		
		char[][] combinedClasses = getCombinedClasses(classes);
		
		
		return null;
	}
	
	private Set<TrainingExample> getFormattedExamples(char[][] combinedClasses, Set<CharacterTrainingExample> examples){
		Set<TrainingExample> formatted = new HashSet<TrainingExample>();
	}
	
	private char[][] getCombinedClasses(char[] currentClasses){
		int splitIndex = currentClasses.length / 2;
		char[] leftClasses = new char[splitIndex];
		char[] rightClasses = new char[currentClasses.length - leftClasses.length];
		
		for (int i = 0; i < splitIndex; i++){
			leftClasses[i] = currentClasses[i];
		}
		for (int i = 0; i < rightClasses.length; i++){
			rightClasses[i] = currentClasses[i + splitIndex];
		}
		
		char[][] combined = {leftClasses, rightClasses};
		return combined;
	}
}

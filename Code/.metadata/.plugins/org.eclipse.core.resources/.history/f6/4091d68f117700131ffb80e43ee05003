package neuralNetwork;

import java.util.LinkedList;
import java.util.List;
import java.util.Random;

public class NeuralNetwork {
	NetworkLayer inputLayer, outputLayer;
	List<NetworkLayer> hiddenLayers;
	private final int FIRST_HIDDEN_LAYER_INDEX = 0;
	private final float MAX_RANDOM_WEIGHT = 0.05f;
	
	public NeuralNetwork(int numberInputs, int numberHiddenLayers,
			int numNeuronsPerHiddenLayer, int numberOutputs,
			boolean isRandomWeights){
		inputLayer = createBlankLayer(numberInputs);
		setupHiddenLayers(numberHiddenLayers, numNeuronsPerHiddenLayer);
		setupOutputLayer(numberOutputs);
		
		setupConnections(isRandomWeights);
	}
	
	private void setupConnections(boolean isRandomWeights){
		Random rand = new Random();
		float weight = (isRandomWeights ? (rand.nextFloat() / (1.0f / MAX_RANDOM_WEIGHT) * 2)
				- MAX_RANDOM_WEIGHT : 0.0f);
		
		for (Neuron nextInputNeuron : inputLayer.getNeurons()){
			for (Neuron nextHiddenNeuron : 
				hiddenLayers.get(FIRST_HIDDEN_LAYER_INDEX).getNeurons()){
				if (!nextHiddenNeuron.isBias()){
					nextInputNeuron.addOutputConnection(nextHiddenNeuron, weight);
					nextHiddenNeuron.addInputConnection(nextInputNeuron, weight);
				}
			}
		}
	}
	
	private void setupHiddenLayers(int numberHiddenLayers, 
			int numNeuronsPerLayer){
		hiddenLayers = new LinkedList<NetworkLayer>();
		
		for (int i = 0; i < numberHiddenLayers; i++){
			hiddenLayers.add(createBlankLayer(numNeuronsPerLayer));
		}
	}
	
	private void setupOutputLayer(int numberOutputs){
		outputLayer = new NetworkLayer();
		
		for (int i = 0; i < numberOutputs; i++){
			outputLayer.addNeuron(new Neuron());
		}
	}
	
	private NetworkLayer createBlankLayer(int numberOfNeurons){
		NetworkLayer layer = new NetworkLayer();
		
		Neuron biasNeuron = new Neuron();
		biasNeuron.setBias(true);
		layer.addNeuron(biasNeuron);
		
		for (int i = 0; i < numberOfNeurons; i++){
			layer.addNeuron(new Neuron());
		}
		
		return layer;
	}
}

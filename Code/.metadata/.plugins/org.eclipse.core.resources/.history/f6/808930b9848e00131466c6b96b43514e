package debug;

import imageProcessing.ImagePreprocessor;
import imageProcessing.NewLineTranslationResult;
import io.CharacterType;
import io.TrainingDataReader;

import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import app.CharacterResult;
import networkIOtranslation.INetworkIOTranslator;
import neuralNetwork.CharacterTrainingExample;

public class CorrelationDebug {
	public static float getCorrelationBetweenTrainingSets(CharacterType type, int firstSetNum, int secondSetNum) throws IOException{
		Set<CharacterTrainingExample> set1 = TrainingDataReader.createTrainingSetFromFile(type);
		Set<CharacterTrainingExample> set2 = TrainingDataReader.createTrainingSetFromFile(type);
		
		if (set1.size() != set2.size()){
			throw new IOException("dammit.");
		}
		
		Object[] array1 = set1.toArray();
		Object[] array2 = set2.toArray();
		
		float totalCorrts = 0.0f;
		
		for (int i = 0; i < array1.length; i++){
			CharacterTrainingExample example1 = (CharacterTrainingExample)array1[i];
			CharacterTrainingExample example2 = (CharacterTrainingExample)array2[i];
			
			totalCorrts = FeatureExtractionDebug.getCorrelation(example1.getCharacterImage(), example2.getCharacterImage());
		}
		
		return totalCorrts / set1.size();
	}
	
	public static void correlateAgainstTestCharacters(String expectedText, BufferedImage testImage){		
		int index = 0;
		
		Set<CharacterTrainingExample> examples = null;
		try {
			examples = TrainingDataReader.createTrainingSetFromFile(CharacterType.ASCII);
		} catch (IOException e) {
			System.out.println("FAILED TO CREATE TRAINING SET.");
			e.printStackTrace();
		}
		
		int numRight = 0;
		int totalComparisons = 0;
		
		ImagePreprocessor processor = new ImagePreprocessor();
		BufferedImage trimmedImage = processor.trimMargins(testImage);
		
		List<BufferedImage> lines = processor.splitIntoLines(trimmedImage);
		
		for (BufferedImage nextLine : lines){
			List<BufferedImage> characters = processor.splitIntoCharacters(nextLine);
			
			for (BufferedImage nextCharacter : characters){
				while(expectedText.charAt(index) == ' '){
					index++;
				}
				
				char chosenCharacter = 'A';
				float highestCorrelation = -1.0f;
				System.out.println("--- SHOULD BE '" + expectedText.charAt(index) + "'");
				
				Iterator<CharacterTrainingExample> iter = examples.iterator();
				while(iter.hasNext()){
					CharacterTrainingExample nextExample = iter.next();
					
					BufferedImage nextTrainingImg = nextExample.getCharacterImage();
					float nextCorrelation = FeatureExtractionDebug.getCorrelation(nextCharacter, nextTrainingImg);
					
					if (nextExample.getCharacterValue() == expectedText.charAt(index)){
						System.out.println("correlation between same chars: " + nextCorrelation);
					}
					
					if (nextCorrelation > highestCorrelation || highestCorrelation < 0){
						highestCorrelation = nextCorrelation;
						chosenCharacter = nextExample.getCharacterValue();
					}
				}
				if (chosenCharacter != ' '){
					if (chosenCharacter == expectedText.charAt(index)){ numRight++;}
					else{System.out.println("bestChar: " + chosenCharacter + " with " + highestCorrelation + " correlation");}
					totalComparisons++;
					index++;
				}
			}
		}
		System.out.println("\r\nACCURACY: " + ((float)numRight / totalComparisons));
	}
	
	private boolean isSpace(BufferedImage image, INetworkIOTranslator translator){
		float[] input = translator.translateImageToNetworkInput(image);
		boolean isSpace = true;
		
		for (int i = 0; i < input.length && isSpace; i++){
			isSpace = input[i] == 0;
		}
		
		return isSpace;
	}
}

package neuralNetwork;

import java.util.Random;

public class MatrixNeuralNetwork {
	private float[] inputValues, outputValues;
	private float[][] hiddenValues;
	
	private float[] outputErrors;
	private float[][] hiddenErrors;
	
	private float[][] inputWeights, outputWeights;
	private float[][][] hiddenWeights;
	
	private float[][] inputDeltas, outputDeltas;
	private float[][][] hiddenDeltas;
	
	private final float MAX_RANDOM_WEIGHT = 0.05f;
	
	public MatrixNeuralNetwork(int numberInputs, int numberHiddenLayers, int numberHiddenNeurons,
			int numberOutputs, boolean useRandomWeights){
		inputValues = new float[numberInputs + 1];
		outputValues = new float[numberOutputs];
		hiddenValues = new float[numberHiddenLayers][numberHiddenNeurons + 1];
		
		inputWeights = new float[numberInputs + 1][numberHiddenNeurons];
		outputWeights = new float[numberHiddenNeurons + 1][numberOutputs];
		hiddenWeights = new float[numberHiddenLayers - 1][numberHiddenNeurons + 1][numberHiddenNeurons];
		
		if (useRandomWeights){
			initializeRandomWeights();
		}
	}
	
	public float[] forwardPropagate(float[] input){
		for (int k = 1; k < inputValues.length; k++){
			inputValues[k] = input[k-1];
		}
		
		return null;
	}
	
	private void initializeRandomWeights(){
		initializeWeightsForLayer(inputWeights);
		for (int i = 0; i < hiddenWeights.length; i++){
			initializeWeightsForLayer(hiddenWeights[i]);
		}
		initializeWeightsForLayer(outputWeights);
		
		initializeBias();
	}
	
	private void initializeBias(){
		inputValues[0] = 1.0f;
		
		for (int l = 0; l < hiddenValues.length; l++){
			hiddenValues[l][0] = 1.0f;
		}
	}
	
	private void initializeWeightsForLayer(float[][] layerWeights){
		Random rand = new Random();
		
		for (int i = 0; i < layerWeights.length; i++){
			for (int j = 0; j < layerWeights[0].length; j++){
				float nextWeight = rand.nextFloat() - (1.0f - (2 * MAX_RANDOM_WEIGHT)) - MAX_RANDOM_WEIGHT;
				layerWeights[i][j] = nextWeight;
			}
		}
	}
	
	// --- GETTERS AND SETTERS --- //
	
	public float[] getInputValues(){
		return inputValues;
	}
	
	public float[][] getInputWeights(){
		return inputWeights;
	}
	
	public float[][] getInputDeltas(){
		return inputDeltas;
	}
	
	public float[] getHiddenValues(int layer){
		return hiddenValues[layer];
	}
	
	public float[] getHiddenErrors(int layer){
		return hiddenErrors[layer];
	}
	
	public float[][] getHiddenWeights(int layer){
		return hiddenWeights[layer];
	}
	
	public float[][] getHiddenDeltas(int layer){
		return hiddenDeltas[layer];
	}
	
	public float[] getOutputValues(){
		return outputValues;
	}
	
	public float[] getOutputErrors(){
		return outputErrors;
	}
	
	public float[][] getOutputWeights(){
		return outputWeights;
	}
	
	public float[][] getOutputDeltas(){
		return outputDeltas;
	}
	
	public void setInputWeight(int i, int j, float value){
		inputWeights[i][j] = value;
	}
	
	public void setHiddenWeight(int layer, int i, int j, float value){
		hiddenWeights[layer][i][j] = value;
	}
	
	public void setOutputWeight(int i, int j, float value){
		inputWeights[i][j] = value;
	}
	
	public void setHiddenError(int layer, int k, float value){
		hiddenErrors[layer][k] = value;
	}
	
	public void setOutputError(int k, float value){
		outputErrors[k] = value;
	}
	
	public void setInputDelta(int i, int j, float value){
		inputDeltas[i][j] = value;
	}
	
	public void setHiddenDelta(int layer, int i, int j, float value){
		hiddenDeltas[layer][i][j] = value;
	}
	
	public void setOutputDelta(int i, int j, float value){
		outputDeltas[i][j] = value;
	}
}

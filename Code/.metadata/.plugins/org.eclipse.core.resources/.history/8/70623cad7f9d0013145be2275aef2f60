package decisionTrees;

import java.util.HashSet;
import java.util.Set;

import neuralNetwork.CharacterTrainingExample;
import neuralNetwork.INeuralNetwork;
import neuralNetwork.TrainingExample;
import app.ICharacterConverter;

public class ConfusionMatrixBuilder {
	public static int[][] buildConfusionMatrix(Set<CharacterTrainingExample> trainingSet,
			Set<CharacterTrainingExample> testSet, ICharacterConverter converter, float errorGoal){
		INeuralNetwork trainedNetwork = trainNetwork(trainingSet, converter);
		
		return null;
	}
	
	private static INeuralNetwork trainNetwork(Set<CharacterTrainingExample> trainingSet,
			ICharacterConverter converter) {
		Set<TrainingExample>
		
		return null;
	}
	
	private static Set<TrainingExample> getTrainingExamples(Set<CharacterTrainingExample> characterSet){
		Set<TrainingExample> examples = new HashSet<TrainingExample>();
	}

	private static int convertOutputToClassNumber(float[] output){
		int classNr = -1;
		float maxOutput = -2.0f;
		
		for (int i = 0; i < output.length; i++){
			if (output[i] > maxOutput){
				maxOutput = output[i];
				classNr = i;
			}
		}
		
		return classNr;
	}
}

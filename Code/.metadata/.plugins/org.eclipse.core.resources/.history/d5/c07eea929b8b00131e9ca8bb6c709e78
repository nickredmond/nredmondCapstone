package app;

public class EditDistanceCalculator {
	public static int calculateLevenshteinDistance(String startingWord, String endingWord, boolean caseSensitive){
		if (!caseSensitive){
			startingWord = startingWord.toLowerCase();
			endingWord = endingWord.toLowerCase();
		}
		
		char[] startingChars = startingWord.toCharArray();
		char[] endingChars = endingWord.toCharArray();
		
		int[][] distances = new int[startingChars.length][endingChars.length];
		
		for (int i = 0; i < startingWord.length(); i++){
			distances[i][0] = i;
		}
		for (int j = 0; j < endingWord.length(); j++){
			distances[0][j] = j;
		}
		
		for (int j = 1; j < endingChars.length; j++){
			for (int i = 1; i < startingChars.length; i++){
				distances[i][j] = (startingChars[i] == endingChars[j]) ? distances[i-1][j-1] : findCheapestOperation(distances, i, j);
			}
		}
		
		return distances[distances.length - 1][distances[0].length - 1];
	}
	
	private static int findCheapestOperation(int[][] distances, int i, int j){
		int substitutionCost = distances[i-1][j] + 1;
		int insertionCost = distances[i][j-1] + 1;
		int deletionCost = distances[i-1][j-1] + 1;
		
		return min(substitutionCost, insertionCost, deletionCost);
	}
	
	private static int min(int... arguments){
		int result = 0;
		boolean hasBeenSet = false;
		
		for (int i = 0; i < arguments.length; i++){
			if (!hasBeenSet || arguments[i] < result){
				hasBeenSet = true;
				result = arguments[i];
			}
		}
		
		return result;
	}
}

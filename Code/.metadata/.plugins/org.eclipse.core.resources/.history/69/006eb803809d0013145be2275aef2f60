package decisionTrees;

import java.util.HashSet;
import java.util.Set;

import networkIOtranslation.INetworkIOTranslator;
import neuralNetwork.CharacterTrainingExample;
import neuralNetwork.INeuralNetwork;
import neuralNetwork.TrainingExample;
import app.ICharacterConverter;

public class ConfusionMatrixBuilder {
	private ICharacterConverter converter;
	private INetworkIOTranslator translator;
	
	public static int[][] buildConfusionMatrix(Set<CharacterTrainingExample> trainingSet,
			Set<CharacterTrainingExample> testSet, ICharacterConverter converter, float errorGoal){
		INeuralNetwork trainedNetwork = trainNetwork(trainingSet, converter);
		
		return null;
	}
	
	private static INeuralNetwork trainNetwork(Set<CharacterTrainingExample> trainingSet,
			ICharacterConverter converter) {
		Set<TrainingExample>
		
		return null;
	}
	
	private static Set<TrainingExample> getTrainingExamples(Set<CharacterTrainingExample> characterSet,
			ICharacterConverter converter) throws Exception{
		Set<TrainingExample> examples = new HashSet<TrainingExample>();
		
		for (CharacterTrainingExample nextExample : characterSet){
			int classNr = converter.convertCharacterToClassNumber(nextExample.getCharacterValue());
			
			int[] output = 
		}
	}
	
	private static int[] convertClassNrToOutput(int numberOfClasses, int classNr){
		int[] output = new int[numberOfClasses];
		output[classNr] = 1;
		
		return output;
	}

	private static int convertOutputToClassNumber(float[] output){
		int classNr = -1;
		float maxOutput = -2.0f;
		
		for (int i = 0; i < output.length; i++){
			if (output[i] > maxOutput){
				maxOutput = output[i];
				classNr = i;
			}
		}
		
		return classNr;
	}
}

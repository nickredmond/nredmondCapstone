package featureExtraction;

import java.awt.Point;
import java.util.ArrayList;
import java.util.List;

public class ChainCodeCreator {
	private static final int VISITED = -1;
	private int numberPixelsFollowed = 0;
	//private static final int NON_VISITED = 1;
	
	public int[] generateChainCode(int[][] skeletonValues){		
		List<Integer> chainCodeValues = new ArrayList<Integer>();
		List<FeaturePoint> featurePoints = VectorCalculator.calculateFeaturePointLocations(skeletonValues);
		
		boolean foundStartingPt = false;
		for (int i = 0; i < featurePoints.size() && !foundStartingPt; i++){
			FeaturePoint nextPoint = featurePoints.get(i);
			if (nextPoint.getType() == FeatureType.END_POINT){
				foundStartingPt = true;
				skeletonValues[nextPoint.y()][nextPoint.x()] = VISITED;
				findNextPixel(skeletonValues, chainCodeValues, nextPoint.y(), nextPoint.x());
			}
		}
		
		for (int row = 0; row < skeletonValues.length; row++){
			for (int col = 0; col < skeletonValues[0].length; col++){
				if (skeletonValues[row][col] > 0){
					skeletonValues[row][col] = VISITED;
					findNextPixel(skeletonValues, chainCodeValues, row, col);
				}
			}
		}
		
		int[] chainCode = new int[chainCodeValues.size()];
		
		System.out.print("CHAIN CODE: ");
		for (int i = 0; i < chainCodeValues.size(); i++){
			chainCode[i] = chainCodeValues.get(i);
			System.out.print(chainCode[i] + " ");
		}
		System.out.println("\r\n");
		
		return chainCode;
	}
	
	private void findNextPixel(int[][] skeletonValues, List<Integer> chainCodeValues, int row, int col){
		VectorDirection[] directions = VectorDirection.values();
		boolean hasTraversed = false;
		int currentPosition = numberPixelsFollowed;
		
		for (int i = 0; i < directions.length && !hasTraversed; i++){
			Point nextSurroundingPoint = directions[i].getNextPixelPoint(row, col, skeletonValues);
			int nextPointValue = (nextSurroundingPoint.x != -1 && nextSurroundingPoint.y != -1) ? skeletonValues[nextSurroundingPoint.y][nextSurroundingPoint.x] : 0;
			
			if (nextPointValue > 0){
				if (i == 4 && col > 6 && row == 18){
					System.out.println("col: " + col + ", row: " + row);
				}
				
				chainCodeValues.add(directions[i].ordinal());
				skeletonValues[row][col] = VISITED;
				
				numberPixelsFollowed++;
				findNextPixel(skeletonValues, chainCodeValues, nextSurroundingPoint.y, nextSurroundingPoint.x);
				
				if (numberPixelsFollowed - currentPosition == 1){
					numberPixelsFollowed--;
					chainCodeValues.remove(chainCodeValues.size() - 1);
				}
				else hasTraversed = true;
			}
		}
	}	
}

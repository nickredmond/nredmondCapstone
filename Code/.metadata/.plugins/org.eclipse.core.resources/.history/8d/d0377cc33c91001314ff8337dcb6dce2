package ui;

import io.CharacterType;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;

import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

import networkIOtranslation.AlphaNumericIOTranslator;
import networkIOtranslation.INetworkIOTranslator;
import neuralNetwork.INeuralNetwork;
import neuralNetwork.MatrixBackpropTrainer;
import neuralNetwork.MatrixNeuralNetwork;
import app.AlphaNumericCharacterConverter;
import app.NetworkFactory;

public class CustomNetworkWindow extends JFrame {
	private JTextField numberLayersBox, numberNeuronsBox;
	private JButton trainButton, saveButton;
	
	private INeuralNetwork customNetwork;
	private int numberNeurons, numberLayers;
	
	public CustomNetworkWindow(){
		this.getContentPane().setLayout(new BoxLayout(this.getContentPane(), BoxLayout.Y_AXIS));
		setupTextFieldPanels();
		setupButtons();
	}

	private void setupButtons() {
		trainButton = new JButton("Train Network");
		saveButton = new JButton("Save Button");
		
		trainButton.addActionListener(new ButtonListener());
		saveButton.addActionListener(new ButtonListener());
		
		saveButton.setEnabled(false);
		
		this.add(trainButton);
		this.add(saveButton);
	}

	private void setupTextFieldPanels() {
		JPanel numberLayersPanel = new JPanel();
		JPanel numberNeuronsPanel = new JPanel();
		
		JLabel layersLabel = new JLabel("Number of hidden layers:");
		JLabel neuronsLabel = new JLabel("Number of neurons per hidden layer:");
		
		numberLayersPanel.setLayout(new BoxLayout(numberLayersPanel, BoxLayout.X_AXIS));
		numberNeuronsPanel.setLayout(new BoxLayout(numberNeuronsPanel, BoxLayout.X_AXIS));
		
		numberLayersBox = new JTextField();
		numberNeuronsBox = new JTextField();
		
		numberLayersPanel.add(layersLabel);
		numberLayersPanel.add(numberLayersBox);
		
		numberNeuronsPanel.add(neuronsLabel);
		numberNeuronsPanel.add(numberNeuronsBox);
		
		this.add(numberLayersPanel);
		this.add(numberNeuronsPanel);
	}
	
	private boolean parseUserInput(){
		String numberLayersText = numberLayersBox.getText();
		String numberNeuronsText = numberNeuronsBox.getText();
		String numericalPattern = "^[0-9]+$";
		
		boolean isValidInput = (numberLayersText.matches(numericalPattern) &&
				numberNeuronsText.matches(numericalPattern));
		
		if (isValidInput){
			numberLayers = Integer.parseInt(numberLayersText);
			numberNeurons = Integer.parseInt(numberNeuronsText);
		}
		else JOptionPane.showMessageDialog(this, "Input must be positive integer values.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
		
		return isValidInput;
	}
	
	private class ButtonListener implements ActionListener{
		@Override
		public void actionPerformed(ActionEvent evt) {
			if (evt.getSource() == trainButton){
				if (parseUserInput()){
					try {
						trainButton.setEnabled(false);
						saveButton.setEnabled(false);
						
						INetworkIOTranslator translator = new AlphaNumericIOTranslator();
						INeuralNetwork network = new MatrixNeuralNetwork(((AlphaNumericIOTranslator)translator).getInputLength(),
								numberLayers, numberNeurons, AlphaNumericCharacterConverter.NUMBER_CLASSES, true);
						customNetwork = NetworkFactory.getTrainedNetwork(network, translator, CharacterType.ASCII2, new MatrixBackpropTrainer(0.05f, 0.02f));
						
						trainButton.setEnabled(true);
						saveButton.setEnabled(true);
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			}
			else if (evt.getSource() == saveButton){
				JFileChooser chooser = new JFileChooser();
				int result = chooser.showSaveDialog(CustomNetworkWindow.this);
				
				if (result == JFileChooser.APPROVE_OPTION){
					File networkFile = chooser.getSelectedFile();
					//NeuralNetworkIO.writeNetwork(customNetwork, networkName);
				}
			}
		}
	}
}

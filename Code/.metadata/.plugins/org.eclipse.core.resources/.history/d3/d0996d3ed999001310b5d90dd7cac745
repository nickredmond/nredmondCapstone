package genetics;

import java.util.HashSet;
import java.util.Set;

import networkIOtranslation.FeatureExtractionIOTranslator;
import networkIOtranslation.INetworkIOTranslator;
import neuralNetwork.CharacterTrainingExample;
import neuralNetwork.INeuralNetwork;
import neuralNetwork.MatrixBackpropTrainer;
import neuralNetwork.MatrixNeuralNetwork;
import neuralNetwork.TrainingExample;

public class MetaclassFitnessCalculator implements IFitnessCalculator {
	private Set<CharacterTrainingExample> trainingSet, testSet;
	private char[] classes;
	private INetworkIOTranslator translator;
//	private INeuralNetwork network;
	
	public MetaclassFitnessCalculator(Set<CharacterTrainingExample> trainingSet, Set<CharacterTrainingExample> testSet,
			char[] classes){
		this.trainingSet = trainingSet;
		this.testSet = testSet;
		this.classes = classes;
		
		translator = new FeatureExtractionIOTranslator();
	}
	
	@Override
	public float getFitness(int[] chromosome) {
		if (chromosome.length != classes.length){
			throw new IllegalArgumentException("Chromosome must be of same length as classes.");
		}
		
		int numLeftClasses = 0;
		int numRightClasses = 0;
		
		for (int i = 0; i < chromosome.length; i++){
			if (chromosome[i] == 0){
				numLeftClasses++;
			}
			else numRightClasses++;
		}
		
		char[] leftClasses = new char[numLeftClasses];
		char[] rightClasses = new char[numRightClasses];
		
		int currentLeftIndex = 0;
		int currentRightIndex = 0;
		
		for (int i = 0; i < chromosome.length; i++){
			if (chromosome[i] == 0){
				leftClasses[currentLeftIndex] = classes[i];
				currentLeftIndex++;
			}
			else{
				rightClasses[currentRightIndex] = classes[i];
				currentRightIndex++;
			}
		}
		
		FeatureExtractionIOTranslator translator = new FeatureExtractionIOTranslator();
		MatrixBackpropTrainer trainer = new MatrixBackpropTrainer(0.05f, 0.02f);
		INeuralNetwork leftNetwork = new MatrixNeuralNetwork(translator.getInputLength(), 1, 100, numLeftClasses, true);
		INeuralNetwork rightNetwork = new MatrixNeuralNetwork(translator.getInputLength(), 1, 100, numLeftClasses, true);
		
		Set<TrainingExample> leftSet = convertToTrainingSet(leftClasses, trainingSet);
		Set<TrainingExample> rightSet = convertToTrainingSet(rightClasses, trainingSet);
		
		trainer.trainWithTrainingSet(leftNetwork, leftSet, testSet);
		trainer.trainWithTrainingSet(rightNetwork, rightSet, testSet);
		
		return 0;
	}

	private Set<TrainingExample> convertToTrainingSet(char[] classes, Set<CharacterTrainingExample> examples){
		Set<TrainingExample> result = new HashSet<TrainingExample>();
		
		for (CharacterTrainingExample nextExample : examples){
			char nextChar = nextExample.getCharacterValue();
			float[] input = translator.translateImageToNetworkInput(nextExample.getCharacterImage());
			int[] output = translateCharacterToOutput(nextChar, classes);
			result.add(new TrainingExample(input, output));
		}
		
		return result;
	}
	
	private char translateOutputToCharacter(float[] output, char[] classes){
		if (output.length != classes.length){
			throw new IllegalArgumentException("Output must be same length as classes.");
		}
		
		int index = 0;
		float maxValue = 0.0f;
		
		for (int i = 0; i < output.length; i++){
			if (output[i] > maxValue){
				maxValue = output[i];
				index = i;
			}
		}
		
		return classes[index];
	}
	
	private int[] translateCharacterToOutput(char character, char[] classes){
		int[] output = new int[classes.length];
		boolean foundCharacter = false;
		
		for (int i = 0; i < output.length && !foundCharacter; i++){
			if (classes[i] == character){
				output[i] = 1;
				foundCharacter = true;
			}
		}
		return output;
	}
}
